def get_ints():
    return tuple(map(int, input().split()))

import numpy as np

import math
MAX = math.inf

def roll(distance):
    while True:
        distance_padded = np.pad(distance + 1, ((1, 1), (1, 1)), mode='constant', constant_values=MAX)
        # assert distance_padded.shape == 
        distance = np.min([
            distance,
            distance_padded[1:-1, 2:],
            distance_padded[1:-1, :-2],
            distance_padded[2:, 1:-1],
            distance_padded[:-2, 1:-1],
        ], axis=0)
        # print(distance)
        idxmax_ = np.unravel_index(np.argmax(distance), distance.shape)
        if distance[idxmax_] < MAX:
            return distance, idxmax_

def main(matrix):
    distance = np.where(matrix, 0, MAX)
    distance, idxmax_ = roll(distance)
    matrix[idxmax_] = True
    distance[distance > distance[idxmax_] // 2] = MAX
    distance[idxmax_] = 0
    distance, idxmax_ = roll(distance)
    return int(distance[idxmax_])

    # distance = np.ndarray(matrix.shape * 2 - 1, dtype=int)
    # np.apply_along_axis()
    # convolve2d(matrix, distance, mode='same')
    # return 0


T, = get_ints()
for i in range(T):
    shape = get_ints()
    array = np.ndarray(shape, dtype=bool)
    for j in range(shape[0]):
        array[j] = tuple(map(int, input()))
    # print(array)
    ans = main(array)
    print("Case #{}: {}".format(i + 1, ans))
